{"version":3,"sources":["Controls.jsx","WordList.jsx","GuessList.jsx","MakeGuess.jsx","App.jsx","services.js","serviceWorker.js","index.js"],"names":["Controls","_ref","startGame","react_default","a","createElement","onClick","WordList","wordList","words","map","word","key","className","GuessList","MakeGuess","disabled","updateGuess","guess","onKeyPress","e","target","value","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","game","guesses","valid","bind","assertThisInitialized","_this2","fetch","method","then","response","ok","json","Promise","reject","id","setState","console","log","src_Controls","src_WordList","src_GuessList","src_MakeGuess","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gOASeA,SAPE,SAAAC,GAAmB,IAAhBC,EAAgBD,EAAhBC,UAClB,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAQC,QAASJ,GAAjB,qBCQSK,EAXE,SAAAN,GAAe,IACxBO,EADwBP,EAAZQ,MACKC,IAAK,SAAAC,GAAI,OAAKR,EAAAC,EAAAC,cAAA,MAAIO,IAAKD,GAAOA,KAErD,OACER,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,MAAIQ,UAAU,aACXL,KCEMM,EARG,WAChB,OACEX,EAAAC,EAAAC,cAAA,OAAKQ,UAAU,WACbV,EAAAC,EAAAC,cAAA,MAAIQ,UAAU,iBCKLE,EARG,SAAAd,GAAsC,IAAnCe,EAAmCf,EAAnCe,SAAUC,EAAyBhB,EAAzBgB,YAAyBhB,EAAZiB,MAC1C,OACEf,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,SAAOc,WAAY,SAACC,GAAD,OAAKH,EAAYG,EAAEC,OAAOC,QAASN,SAAUA,EAAUH,UAAU,UACpFV,EAAAC,EAAAC,cAAA,UAAQW,SAAUA,GAAlB,WCkDSO,cA7Cb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QACKI,MAAQ,CACXC,KAAM,KACNC,QAAS,GACTC,MAAO,GACPhB,MAAO,IAGTM,EAAKtB,UAAYsB,EAAKtB,UAAUiC,KAAfV,OAAAW,EAAA,EAAAX,CAAAD,IACjBA,EAAKP,YAAcO,EAAKP,YAAYkB,KAAjBV,OAAAW,EAAA,EAAAX,CAAAD,IAVPA,2EAaF,IAAAa,EAAAV,KCvBLW,MAAM,QAAS,CACpBC,OAAQ,SAETC,KAAM,SAAAC,GACL,OAAGA,EAASC,GACHD,EAASE,OAEXC,QAAQC,OAAO,UDkBrBL,KAAM,SAAAM,GACLT,EAAKU,SAAS,CAAEf,KAAMc,MCdnBR,MAAM,SAAU,CACrBC,OAAQ,QAETC,KAAM,SAAAC,GACL,OAAGA,EAASC,GACHD,EAASE,OAEXC,QAAQC,OAAO,UDUrBL,KAAM,SAAA/B,GACL4B,EAAKU,SAAS,CAAEb,MAAOzB,0CAIfS,GACV8B,QAAQC,IAAI,CAAC/B,UACbS,KAAKoB,SAAS,CACZ7B,2CAOF,OACEf,EAAAC,EAAAC,cAAA,OAAKQ,UAAU,OACbV,EAAAC,EAAAC,cAAC6C,EAAD,CAAUhD,UAAWyB,KAAKzB,YAC1BC,EAAAC,EAAAC,cAAC8C,EAAD,CAAU1C,MAAOkB,KAAKI,MAAMG,QAC5B/B,EAAAC,EAAAC,cAAC+C,EAAD,MACAjD,EAAAC,EAAAC,cAACgD,EAAD,CAAWpC,YAAaU,KAAKV,YAAaD,UAAWW,KAAKI,MAAMC,KAAMd,MAAOS,KAAKI,MAAMb,gBAxC9EoC,aEEEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO1D,EAAAC,EAAAC,cAACyD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3B,KAAK,SAAA4B,GACjCA,EAAaC","file":"static/js/main.c0a672dc.chunk.js","sourcesContent":["import React from 'react';\n\nconst Controls = ({ startGame }) => {\n  return (\n    <div>\n      <button onClick={startGame}>Start New Game</button>\n    </div>\n  );\n};\nexport default Controls;\n","import React from 'react';\n\nconst WordList = ({ words }) => {\n  const wordList = words.map( word => (<li key={word}>{word}</li>) );\n\n  return (\n    <div>\n      <ul className=\"word-list\">\n        {wordList}\n      </ul>\n    </div>\n  );\n};\nexport default WordList;\n\n","import React from 'react';\n\nconst GuessList = () => {\n  return (\n    <div className=\"guesses\">\n      <ul className=\"guess-list\">\n      </ul>\n    </div>\n  );\n};\nexport default GuessList;\n\n","import React from 'react';\n\nconst MakeGuess = ({ disabled, updateGuess, guess }) => {\n  return (\n    <div>\n      <input onKeyPress={(e)=>updateGuess(e.target.value)}  disabled={disabled} className=\"guess\"/>\n      <button disabled={disabled} >Guess</button>\n    </div>\n  );\n};\nexport default MakeGuess;\n\n","import React, { Component } from 'react';\nimport './App.css';\nimport Controls from './Controls';\nimport WordList from './WordList';\nimport GuessList from './GuessList';\nimport MakeGuess from './MakeGuess';\n\nimport { startGame, validWords } from './services';\n\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      game: null,\n      guesses: [],\n      valid: [],\n      guess: '',\n    };\n\n    this.startGame = this.startGame.bind(this);\n    this.updateGuess = this.updateGuess.bind(this);\n  }\n\n  startGame() {\n    startGame()\n    .then( id => {\n      this.setState({ game: id });\n    });\n    validWords()\n    .then( words => {\n      this.setState({ valid: words });\n    });\n  }\n\n  updateGuess(guess) {\n    console.log({guess});\n    this.setState({\n      guess\n    });\n  }\n\n  render() {\n    // Disable guessing if there is no current game\n    // When Start New is clicked, call the services to populate the valid words and start a new game (record the id)\n    return (\n      <div className=\"App\">\n        <Controls startGame={this.startGame}/>\n        <WordList words={this.state.valid}/>\n        <GuessList/>\n        <MakeGuess updateGuess={this.updateGuess} disabled={!this.state.game} guess={this.state.guess}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","export const startGame = () => {\n  return fetch('/game', {\n    method: 'POST',\n  })\n  .then( response => {\n    if(response.ok) {\n      return response.json();\n    }\n    return Promise.reject('poop');\n  });\n};\n\nexport const validWords = () => {\n  return fetch('/words', {\n    method: 'GET',\n  })\n  .then( response => {\n    if(response.ok) {\n      return response.json();\n    }\n    return Promise.reject('poop');\n  });\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}